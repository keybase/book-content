#{print partial './api_header.toffee'}

<h2>P3SKB Format</h2>

<h4>The idea</h4>

<p>
  For the sake of paranoia, we introduced a new way to store PGP secret
  keys.  We use scrypt passphrase stretching and encrypt secret keys
  with several ciphers.  This might be especially relevant for users
  who store their encrypted private keys on the server, should our
  servers ever be hacked.
</p>

<h4>The Format</h4>

<p>
The payload is written as an Object with Binary data as follows:

<hcode>javascript
{
  "body": {
    "pub": <Buffer c6 8d 04 52 a9 d6 99 01 04 00 cb ed ca 84 6e...>,
    "priv": {
      "data": <Buffer 1c 94 d7 de 00 00 00 03 b5 9b b0 52 54 30 8e...>,
      "encryption": 3
     }
  },
  "hash": {
    "value": <Buffer 60 f2 12 50 9f c8 30 8c 39 80 80 f0 03...>,
    "type": 8
  }
  "tag": 513,
  "version": 1
}
</hcode>
</p>

<p>
  The fields are as follows:
    <ul>

      <li><b>version</b>: The version of this P3SKB block, now set to 1</li>

      <li><b>tag</b>: The tag value of this packet. Keybase-specific tags start at 512, as opposed to PGP-tag types which are all in the 0-30 range.</li>

      <li><b>hash.type</b>: The type of the hash used to hash the packet, using
         the standard PGP-hash numbering scheme (see <a href="http://tools.ietf.org/html/rfc4880#page-63">RFC 4880 Section 9.4</a>).  Here, "8" corresponds to SHA-256</li>

      <li><b>hash.body</b>: The result of hashing this packet, written as binary data.</li>

      <li><b>body.pub</b>: The standard binary PGP representation of the keymaterial needed for this key, similar to what you would get by issuing `gpg --export &lt;keyid&gt;`.</li>

      <li><b>body.priv.data</b>: The TripleSec encryption of the standard binary PGP representation of the secret key material, in plaintext (no S2K encryption). Similar to what you would get by issuing `gpg --export- secret-key &lt;keyid&gt;` if your key wasn't locked with a passphrase.</li>

      <li><b>body.private.encryption</b>: The encryption type used here.  "3" means TripleSec version 3.</li>

    </ul>
</p>

<p>
  The hash is taken over the whole packet, using the following technique:
  <ol>
    <li>Set <tt>hash.body = Buffer.alloc(0)</tt></li>
    <li>Run <a href="http://msgpack.org/">Msgpack</a>.<tt>pack</tt> on the the resulting full JSON object.</li>
    <li>Compute the SHA-256 hash on the binary output of the previous step.</li>
  </ol>
</p>

<p>
  Once the hash is computed, the final P3SKB project is written out as:
  <ol>
    <li>Compute <tt>Msgpack.pack</tt> over the full object, with the included hash from the previous step.</li>
    <li>Base64-encode the result.</li>
  </ol>
</p>

#{print partial './api_footer.toffee'}
